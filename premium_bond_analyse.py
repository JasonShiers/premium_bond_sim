#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Dec 18 12:25:09 2022

@author: Jason Shiers

Premium Bond Monte Carlo analysis
---------------------------------
Reads simulation files generated by sim tool and prints and plots
median and quartile data for various holding sizes
"""

import pickle
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import seaborn as sns


def loadData() -> list[(int, int)]:
    """ Loads winnings data from sim tool into dataMatrix list """
    dataMatrix: list[(int, int)] = list()
    for i in range(0_000, 50_000, 50_000):
        with open('premiumBondDataMatrix' + str(i) + '.pkl', 'rb') as file:
            tmp: list[(int, int)] = pickle.load(file)
            dataMatrix += tmp
    return dataMatrix


def sumWinnings(sim: list[(int, int)], holdings: tuple[int]) -> dict:
    """ Add up the winnings for various different holding sizes
        using the winning bond number as a filter for inclusion
        in each holding bin
    """
    winnings = dict.fromkeys(holdings, 0)

    for bond, prize in sim:
        for holding in holdings:
            if bond < holding:
                winnings[holding] += prize

    return winnings


def returnSims(dataMatrix: list[int, int]) -> dict[int]:
    """ Analyse dataMatrix for different holding sizes and transform into
        dict with a key for each holding size with the value containing
        a list of percentage return for each simulation
    """
    holdings = (100_000, 50_000, 20_000, 10_000, 5_000, 2_000, 1_000, 500)
    winningsMatrix = dict.fromkeys(holdings)
    # Initialise each item with a new list instance
    for key, _ in winningsMatrix.items():
        winningsMatrix[key] = list()

    for sim in dataMatrix:
        total_winnings = sumWinnings(sim, holdings)
        for holding, winnings in total_winnings.items():
            winningsMatrix[holding].append(winnings/holding*100)
    return winningsMatrix


if __name__ == '__main__':
    # Load and transform input data
    dataMatrix = loadData()
    winningsMatrix = returnSims(dataMatrix)

    df = pd.DataFrame(winningsMatrix)

    # Unpivot the data for group by
    df_melted = df.melt(var_name="Holding size", value_name="Percentage return")

    # Use describe method to generate stats
    df_stats = df_melted.groupby('Holding size').describe()['Percentage return'].round(2)

    print(df_stats)

    # Plot median with iqr as shaded region
    ax = sns.lineplot(x=df_stats.index,
                      y=df_stats['50%'])
    ax.fill_between(
            x=df_stats.index,
            y1=df_stats['25%'],
            y2=df_stats['75%'],
            color='lightblue',
            alpha=0.4
        )

    plt.xscale('log')

    # Formatter function for scalar axis ticks and thousands separator
    def format_func(value, ticks):
        return f"{value:,.0f}"

    plt.gca().xaxis.set_major_formatter(ticker.FuncFormatter(format_func))
    plt.xlabel("Holding Size (Â£)")
    plt.ylabel("Annual Return (%)")
    plt.title("Premium Bond returns: median and iqr data")
